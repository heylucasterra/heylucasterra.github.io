'use strict';

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _extends2 = require('babel-runtime/helpers/extends');

var _extends3 = _interopRequireDefault(_extends2);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _require = require('path'),
    resolve = _require.resolve;

var findTemplate = require('./find-template');
var defaultOptions = require('./default-options');
var cwd = process.cwd();

module.exports = function () {
	var _ref = (0, _asyncToGenerator3.default)( /*#__PURE__*/_regenerator2.default.mark(function _callee(_ref2, userOptions) {
		var graphql = _ref2.graphql,
		    boundActionCreators = _ref2.boundActionCreators;

		var options, createPage, markdownPath, glob, content, edges, i, _edges$i$node, fileAbsolutePath, fields, template, slug, component;

		return _regenerator2.default.wrap(function _callee$(_context) {
			while (1) {
				switch (_context.prev = _context.next) {
					case 0:
						options = (0, _extends3.default)({}, defaultOptions, userOptions);
						createPage = boundActionCreators.createPage;
						markdownPath = resolve(cwd, options.path);
						glob = markdownPath + '/**';
						_context.next = 6;
						return graphql('{\n\t\tentries: allMarkdownRemark(\n\t\t\tfilter: {\n\t\t\t\tfileAbsolutePath: {\n\t\t\t\t\tglob: "' + glob + '"\n\t\t\t\t}\n\t\t\t}\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfileAbsolutePath\n\t\t\t\t\tfields{\n\t\t\t\t\t\ttemplate\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}');

					case 6:
						content = _context.sent;

						if (content.errors) {
							console.error(content.errors);
							process.exit(1);
						}
						edges = content.data.entries.edges;
						i = edges.length;

					case 10:
						if (!i--) {
							_context.next = 19;
							break;
						}

						_edges$i$node = edges[i].node, fileAbsolutePath = _edges$i$node.fileAbsolutePath, fields = _edges$i$node.fields;
						template = fields.template, slug = fields.slug;
						_context.next = 15;
						return findTemplate(template, options);

					case 15:
						component = _context.sent;

						createPage({
							path: slug,
							component: component,
							context: {
								slug: slug
							}
						});

					case 17:
						_context.next = 10;
						break;

					case 19:
					case 'end':
						return _context.stop();
				}
			}
		}, _callee, undefined);
	}));

	return function (_x, _x2) {
		return _ref.apply(this, arguments);
	};
}();
//# sourceMappingURL=create-pages.js.map