{"version":3,"sources":["src/create-pages.js"],"names":["require","resolve","findTemplate","defaultOptions","cwd","process","module","exports","userOptions","graphql","boundActionCreators","options","createPage","markdownPath","path","glob","content","errors","console","error","exit","edges","data","entries","i","length","node","fileAbsolutePath","fields","template","slug","component","context"],"mappings":";;;;;;;;;;;;;;;;eAAoBA,QAAQ,MAAR,C;IAAZC,O,YAAAA,O;;AACR,IAAMC,eAAeF,QAAQ,iBAAR,CAArB;AACA,IAAMG,iBAAiBH,QAAQ,mBAAR,CAAvB;AACA,IAAMI,MAAMC,QAAQD,GAAR,EAAZ;;AAEAE,OAAOC,OAAP;AAAA,qFAAiB,wBAAyCC,WAAzC;AAAA,MAASC,OAAT,SAASA,OAAT;AAAA,MAAkBC,mBAAlB,SAAkBA,mBAAlB;;AAAA;;AAAA;AAAA;AAAA;AAAA;AACVC,aADU,8BAEZR,cAFY,EAGZK,WAHY;AAKRI,gBALQ,GAKOF,mBALP,CAKRE,UALQ;AAMVC,kBANU,GAMKZ,QAAQG,GAAR,EAAaO,QAAQG,IAArB,CANL;AAOVC,UAPU,GAOAF,YAPA;AAAA;AAAA,aASMJ,gHAITM,IAJS,uMATN;;AAAA;AASVC,aATU;;AA4BhB,UAAGA,QAAQC,MAAX,EAAkB;AACjBC,eAAQC,KAAR,CAAcH,QAAQC,MAAtB;AACAZ,eAAQe,IAAR,CAAa,CAAb;AACA;AACOC,WAhCQ,GAgCEL,QAAQM,IAAR,CAAaC,OAhCf,CAgCRF,KAhCQ;AAkCPG,OAlCO,GAkCHH,MAAMI,MAlCH;;AAAA;AAAA,WAkCWD,GAlCX;AAAA;AAAA;AAAA;;AAAA,sBAmCoBH,MAAMG,CAAN,EAASE,IAnC7B,EAmCTC,gBAnCS,iBAmCTA,gBAnCS,EAmCSC,MAnCT,iBAmCSA,MAnCT;AAoCTC,cApCS,GAoCUD,MApCV,CAoCTC,QApCS,EAoCCC,IApCD,GAoCUF,MApCV,CAoCCE,IApCD;AAAA;AAAA,aAsCO5B,aAAa2B,QAAb,EAAuBlB,OAAvB,CAtCP;;AAAA;AAsCXoB,eAtCW;;AAuCfnB,iBAAW;AACVE,aAAMgB,IADI;AAEVC,2BAFU;AAGVC,gBAAS;AACRF;AADQ;AAHC,OAAX;;AAvCe;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EAAjB;;AAAA;AAAA;AAAA;AAAA","file":"create-pages.js","sourcesContent":["const { resolve } = require('path')\nconst findTemplate = require('./find-template')\nconst defaultOptions = require('./default-options')\nconst cwd = process.cwd()\n\nmodule.exports = async ({ graphql, boundActionCreators }, userOptions) => {\n\tconst options = {\n\t\t...defaultOptions,\n\t\t...userOptions,\n\t}\n\tconst { createPage } = boundActionCreators\n\tconst markdownPath = resolve(cwd, options.path)\n\tconst glob = `${markdownPath}/**`\n\n\tconst content = await graphql(`{\n\t\tentries: allMarkdownRemark(\n\t\t\tfilter: {\n\t\t\t\tfileAbsolutePath: {\n\t\t\t\t\tglob: \"${glob}\"\n\t\t\t\t}\n\t\t\t}\n\t\t) {\n\t\t\tedges {\n\t\t\t\tnode {\n\t\t\t\t\tfileAbsolutePath\n\t\t\t\t\tfields{\n\t\t\t\t\t\ttemplate\n\t\t\t\t\t\tslug\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}`)\n\tif(content.errors){\n\t\tconsole.error(content.errors)\n\t\tprocess.exit(1)\n\t}\n\tconst { edges } = content.data.entries\n\n\tfor (let i = edges.length; i--;) {\n\t\tlet { fileAbsolutePath, fields } = edges[i].node\n\t\tlet { template, slug } = fields\n\n\t\tlet component = await findTemplate(template, options)\n\t\tcreatePage({\n\t\t\tpath: slug,\n\t\t\tcomponent,\n\t\t\tcontext: {\n\t\t\t\tslug,\n\t\t\t},\n\t\t})\n\t}\n}"]}